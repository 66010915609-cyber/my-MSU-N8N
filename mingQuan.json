{
  "name": "mingQuan",
  "nodes": [
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.photo[2].file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        464,
        176
      ],
      "id": "7435b05d-e8f1-4d0b-8bcb-f7d0488c0ecf",
      "name": "Get a file",
      "webhookId": "7093cd85-1479-486a-a9ee-b90ed994ac42",
      "credentials": {
        "telegramApi": {
          "id": "sdtBgfKVDl9J87v5",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n// ดึงข้อความจากผล OCR และแยกบรรทัด\nfor (const item of $input.all()) {\n  const result = item.json.ParsedResults?.[0]?.ParsedText || \"\";\n  \n  // แปลงเป็น array ของบรรทัด\n  const lines = result.split('\\n').map(line => line.trim()).filter(Boolean);\n  \n  // สร้าง object สำหรับเก็บผล\n  const summary = {\n    startingCash: Number,\n    cashSales: Number,\n    refunds: Number,\n    cashInOut: Number,\n    expectedTotal: Number,\n    actualCash: Number,\n    discrepancy: Number,\n    totalBills: Number\n  };\n  \n  // อ่านค่าจากข้อความ OCR ทีละบรรทัด\n  for (const line of lines) {\n    if (line.startsWith(\"Starting Cash\")) summary.startingCash = parseFloat(line.split(/\\s+/).pop());\n    if (line.startsWith(\"Cash Sales\")) summary.cashSales = parseFloat(line.split(/\\s+/).pop());\n    if (line.startsWith(\"Refunds\")) summary.refunds = parseFloat(line.split(/\\s+/).pop());\n    if (line.startsWith(\"Cash In/Out\")) summary.cashInOut = parseFloat(line.split(/\\s+/).pop());\n    if (line.startsWith(\"Expected Cash Total\")) summary.expectedTotal = parseFloat(line.split(/\\s+/).pop());\n    if (line.startsWith(\"Actual Cash in Drawer\")) summary.actualCash = parseFloat(line.split(/\\s+/).pop());\n    if (line.startsWith(\"Discrepancy\")) summary.discrepancy = parseFloat(line.split(/\\s+/).pop());\n    if (line.startsWith(\"Total Bills\")) summary.totalBills = parseInt(line.split(/\\s+/).pop());\n  }\n\n  item.json.salesSummary = summary;\n}\n\nreturn $input.all();\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        816,
        -96
      ],
      "id": "deef823c-2459-4c11-8124-9fb9844a56e9",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();const axios = require(\"axios\")\nconst FormData = require(\"form-data\")\nconst fs = require(\"fs\")\nlet data = new FormData()\ndata.append(\"file\", fs.createReadStream(\"{YOUR UPLOADED FILE}\"))\n\nlet config = {\n    method: \"post\",\n    maxBodyLength: Infinity,\n    url: \"https://api.iapp.co.th/document-ocr/ocr\",\n    headers: {\n        apikey: \"{YOUR API KEY}\",\n        ...data.getHeaders(),\n    },\n    data: data,\n}\n\naxios\n    .request(config)\n    .then((response) => {\n        console.log(JSON.stringify(response.data))\n    })\n    .catch((error) => {\n        console.log(error)\n    })\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        176
      ],
      "id": "79bc9322-da81-4f0d-9ad9-736e3b7ac00b",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.ocr.space/parse/image",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "APIKey",
              "value": "RQKi6m1zThDgjmVe7Lq9Dar8oaP8F7IQ"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        656,
        176
      ],
      "id": "a937d90b-8023-40ae-b8cd-39aa91cab437",
      "name": "Document OCR "
    },
    {
      "parameters": {
        "url": "https://ai.iapp.co.th/product/document_ocr",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "aiapp",
              "value": "RQKi6m1zThDgjmVe7Lq9Dar8oaP8F7IQ"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        864,
        176
      ],
      "id": "7fd52b69-d1d0-4295-8e3e-231f3dbca9a9",
      "name": "Document OCR 1"
    },
    {
      "parameters": {
        "dataTableId": {
          "__rl": true,
          "value": "nP4pLrKsrcGI9JIM",
          "mode": "list",
          "cachedResultName": "สรุปยอดขาย2",
          "cachedResultUrl": "/projects/R76xdBrzukrYXks2/datatables/nP4pLrKsrcGI9JIM"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "StartingCash": "={{ $json.salesSummary.startingCash }}",
            "Cashsale": "={{ $json.salesSummary.cashSales }}",
            "Refunds": "={{ $json.salesSummary.refunds }}",
            "CashInOut": "={{ $json.salesSummary.cashInOut }}",
            "ExpectedCashtotal": "={{ $json.salesSummary.expectedTotal }}",
            "ActualCash": "={{ $json.salesSummary.actualCash }}",
            "Discrepancy": "={{ $json.salesSummary.discrepancy }}",
            "TotalBills": "={{ $json.salesSummary.totalBills }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "StartingCash",
              "displayName": "StartingCash",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Cashsale",
              "displayName": "Cashsale",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Refunds",
              "displayName": "Refunds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "CashInOut",
              "displayName": "CashInOut",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "ExpectedCashtotal",
              "displayName": "ExpectedCashtotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "ActualCash",
              "displayName": "ActualCash",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Discrepancy",
              "displayName": "Discrepancy",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "TotalBills",
              "displayName": "TotalBills",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        1216,
        176
      ],
      "id": "8a7955f5-c4ee-4462-b17a-d435fcd002d3",
      "name": "เข้าตาราง"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "uvzJxNx6V4dCM7HE",
          "mode": "list",
          "cachedResultName": "สรุปยอดขาย",
          "cachedResultUrl": "/projects/R76xdBrzukrYXks2/datatables/uvzJxNx6V4dCM7HE"
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        1392,
        176
      ],
      "id": "b96c7976-0201-4b76-b453-ee89732cc01f",
      "name": "เรียงตาราง"
    },
    {
      "parameters": {
        "updates": [
          "channel_post",
          "message"
        ],
        "additionalFields": {
          "download": true
        }
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        256,
        176
      ],
      "id": "e9daf837-4845-4e00-8a58-d2446e953f15",
      "name": "Chanom Bot",
      "webhookId": "45575b94-535b-4d41-9edf-b2acfec6a97d",
      "alwaysOutputData": false,
      "notesInFlow": false,
      "credentials": {
        "telegramApi": {
          "id": "sdtBgfKVDl9J87v5",
          "name": "Telegram account 2"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Get a file": {
      "main": [
        [
          {
            "node": "Document OCR ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "เข้าตาราง",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document OCR ": {
      "main": [
        [
          {
            "node": "Document OCR 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document OCR 1": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "เข้าตาราง": {
      "main": [
        [
          {
            "node": "เรียงตาราง",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chanom Bot": {
      "main": [
        [
          {
            "node": "Get a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c1959624-d1be-4801-a5ec-c7c3acdaa82f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6329af5e47d839411d4c7f27150ccfe905d839a301878201dfa1d4cbf4c683fd"
  },
  "id": "0d5pEhPtdT4XEnix",
  "tags": []
}